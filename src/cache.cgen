(@ include <janet.h>)

(deft Cache (struct *data JanetTable))

(defn cache_get [(p void*) (key Janet) (*out Janet)] int
  (def *data JanetTable (-> (cast Cache* p) data))
  (set *out (janet_table_get data key))
  (return 1))

(defn cache_put [(p void*) (key Janet) (value Janet)] void
  (def *data JanetTable (-> (cast Cache* p) data))
  (janet_table_put data key value))

(defn cache_next [(p void*) (key Janet)] Janet
  (def data Janet (janet_wrap_table (-> (cast Cache* p) data)))
  (return (janet_next data key)))

(def cache_type JanetAbstractType
  (array "cache"
         NULL NULL
         cache_get cache_put
         NULL NULL NULL NULL NULL
         cache_next
         JANET_ATEND_NEXT))

(defn [static] cache_init [(argc int) (*argv Janet)] Janet
  (janet_fixarity argc 0)
  (def *cache Cache (cast Cache* (janet_abstract &cache_type (sizeof Cache))))
  (set (-> cache data) (janet_table 0))
  (return (janet_wrap_abstract cache)))

(defn [static] cache_clear [(argc int) (*argv Janet)] Janet
  (janet_fixarity argc 2)
  (def *cache Cache (cast Cache* (janet_getabstract argv 0 &cache_type)))
  (def *data JanetTable (-> cache data))
  (def component Janet (index argv 1))
  (def query Janet (janet_wrap_nil))
  (while (not (janet_equals (janet_wrap_nil)
                            (set query (cache_next cache query))))
    (def k Janet (janet_wrap_nil))
    (while (not (janet_equals (janet_wrap_nil)
                              (set k (janet_next query k))))
      (def v Janet (janet_in query k))
      (if (janet_equals component v)
        (janet_table_remove data query))))
  (return (janet_wrap_nil)))

(def (array cache_cfuns) JanetReg
  @[@["init" cache_init
      "(cache/init size)\n\nInitialize cache"]
    @["clear" cache_clear
      "(cache/clear size)\n\nClear key in the cache"]
    @[NULL NULL NULL]])

(defn JANET_MODULE_ENTRY [(env JanetTable*)] nil
  (janet_cfuns env "cache" cache_cfuns))
